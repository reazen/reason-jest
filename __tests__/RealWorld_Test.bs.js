// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");

var User = {};

var Shift = {};

var WorkerShift = {};

function ShiftService(Connection, Logger, UserRepo, ShiftRepo, WorkerShiftRepo) {
  var acceptShift = function (userId, shiftId, connection) {
    return Curry._2(UserRepo.getUser, userId, connection).then(function (user) {
                return Curry._2(ShiftRepo.getShift, shiftId, connection).then(function (shift) {
                            Curry._2(Logger.log, "debug", "accepted");
                            return Curry._3(WorkerShiftRepo.createWorkerShift, user, shift, connection);
                          });
              });
  };
  return {
          acceptShift: acceptShift
        };
}

var testUser = {
  id: "user1",
  name: "Bob",
  phone: "5555555555"
};

var testShift = {
  id: "shift1",
  title: "Dishwasher",
  hourlyRateCents: 2000
};

var testWorkerShift = {
  id: "workerShift1",
  userId: "user1",
  shiftId: "shift1"
};

var MockConnection = {};

var testConnection = "xyz";

var mockLog = jest.fn(function (_level, _message) {
      
    });

var mockGetUser = jest.fn(function (_id, _connection) {
      return Promise.resolve(testUser);
    });

var mockGetShift = jest.fn(function (_id, _connection) {
      return Promise.resolve(testShift);
    });

var mockCreateWorkerShift = jest.fn(function (_user, _shift, _connection) {
      return Promise.resolve(testWorkerShift);
    });

var log = Curry.__2(mockLog);

var MockLogger = {
  log: log
};

var getUser = Curry.__2(mockGetUser);

var MockUserRepo = {
  getUser: getUser
};

var getShift = Curry.__2(mockGetShift);

var MockShiftRepo = {
  getShift: getShift
};

var createWorkerShift = Curry.__3(mockCreateWorkerShift);

var MockWorkerShiftRepo = {
  createWorkerShift: createWorkerShift
};

function acceptShift(userId, shiftId, connection) {
  return getUser(userId, connection).then(function (user) {
              return getShift(shiftId, connection).then(function (shift) {
                          log("debug", "accepted");
                          return createWorkerShift(user, shift, connection);
                        });
            });
}

var TestShiftService = {
  acceptShift: acceptShift
};

describe("ShiftService", (function () {
        beforeEach(function () {
              mockLog.mockClear();
              mockGetUser.mockClear();
              mockGetShift.mockClear();
              mockCreateWorkerShift.mockClear();
              
            });
        test("acceptShift", (function () {
                return Curry._3(TestShiftService.acceptShift, "user1", "shift1", testConnection).then(function (workerShift) {
                            expect(workerShift).toEqual(testWorkerShift);
                            expect(mockGetUser).toHaveBeenCalledWith("user1", testConnection);
                            expect(mockGetShift).toHaveBeenCalledWith("shift1", testConnection);
                            expect(mockCreateWorkerShift).toHaveBeenCalledWith(testUser, testShift, testConnection);
                            expect(mockLog).toBeCalledTimes(1);
                            expect(mockLog).toHaveBeenCalledWith("debug", "accepted");
                            return Promise.resolve(undefined);
                          });
              }));
        test("log", (function () {
                Curry._2(mockLog, "info", "info");
                Curry._2(mockLog, "warn", "warn");
                expect(mockLog).toBeCalledTimes(2);
                expect(mockLog).toHaveBeenNthCalledWith(1, "info", "info");
                return expect(mockLog).toHaveBeenNthCalledWith(2, "warn", "warn");
              }));
        
      }));

exports.User = User;
exports.Shift = Shift;
exports.WorkerShift = WorkerShift;
exports.ShiftService = ShiftService;
exports.testUser = testUser;
exports.testShift = testShift;
exports.testWorkerShift = testWorkerShift;
exports.MockConnection = MockConnection;
exports.testConnection = testConnection;
exports.mockLog = mockLog;
exports.mockGetUser = mockGetUser;
exports.mockGetShift = mockGetShift;
exports.mockCreateWorkerShift = mockCreateWorkerShift;
exports.MockLogger = MockLogger;
exports.MockUserRepo = MockUserRepo;
exports.MockShiftRepo = MockShiftRepo;
exports.MockWorkerShiftRepo = MockWorkerShiftRepo;
exports.TestShiftService = TestShiftService;
/* mockLog Not a pure module */
